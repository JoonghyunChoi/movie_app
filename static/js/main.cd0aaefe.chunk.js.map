{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","propType","PropTypes","string","isRequired","Movie","genres","year","map","index","key","App","state","_callApi","fetch","then","response","json","data","movies","catch","err","console","log","_getMovies","a","setState","_renderMovies","movie","title_english","large_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"8UAuBA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAOF,EAAQC,IAAOA,EAAKE,MAASF,EAAKG,UAAY,iBAIlE,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,0BAAMF,UAAY,eAAeE,GAWzCP,EAAYQ,SAAW,CACnBN,IAAKO,IAAUC,OAAOC,YAG1BL,EAAWE,SAAW,CAClBD,MAAOE,IAAUC,OAAOC,YAGbC,MA9Cf,YAA8C,IAA9BR,EAA6B,EAA7BA,MAAOH,EAAsB,EAAtBA,OAAQY,EAAc,EAAdA,OAAQC,EAAM,EAANA,KACnC,OACI,yBAAKT,UAAY,SACb,yBAAKA,UAAY,kBACb,kBAACL,EAAD,CAAaC,OAAUA,EAAQC,IAAOE,KAE1C,yBAAKC,UAAY,kBACb,4BAAKD,GACL,yBAAKC,UAAY,cACZS,GAEL,yBAAKT,UAAY,gBACZQ,EAAOE,KAAI,SAACR,EAAOS,GAAR,OAAkB,kBAACV,EAAD,CAAYC,MAASA,EAAOU,IAAOD,WCmCtEE,E,4MA7CbC,MAAQ,G,EAMRC,SAAW,WACT,OAAOC,MAAM,8DACVC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKC,UACvBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG9BG,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKZ,WADf,OACLM,EADK,OAEX,EAAKO,SAAS,CACZP,WAHS,2C,EAObQ,cAAgB,WAYd,OAXe,EAAKf,MAAMO,OAAOX,KAAI,SAAAoB,GACnC,OACE,kBAAC,EAAD,CACE/B,MAAS+B,EAAMC,cACfnC,OAAUkC,EAAME,kBAChBxB,OAAUsB,EAAMtB,OAChBI,IAAOkB,EAAMG,GACbxB,KAAQqB,EAAMrB,W,kEAzBpByB,KAAKR,e,+BAgCG,IACAL,EAAWa,KAAKpB,MAAhBO,OACR,OACE,yBAAKrB,UAAaqB,EAAS,MAAQ,eAChCA,EAASa,KAAKL,gBAAkB,sB,GAzCvBM,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd5B,OAAM,SAAA6B,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.cd0aaefe.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './Movie.css'\n\nfunction Movie({title, poster, genres, year}){\n    return (\n        <div className = \"Movie\">\n            <div className = \"Movie_Section1\">\n                <MoviePoster poster = {poster} alt = {title}/>\n            </div>\n            <div className = \"Movie_Section2\">\n                <h1>{title}</h1>\n                <div className = \"Movie_Year\" >\n                    {year}\n                </div>\n                <div className = \"Movie_Genres\">\n                    {genres.map((genre, index) => <MovieGenre genre = {genre} key = {index}/>)}\n                </div>\n            </div>\n        </div>  \n    )\n}\n\nfunction MoviePoster({poster, alt}){\n    return (\n        <img src = {poster} alt = {alt} title = {alt} className = \"Movie_Poster\" />\n    )\n}\n\nfunction MovieGenre({genre}){\n    return (\n        <span className = \"Movie_Genre\">{genre}</span>\n    )\n}\n\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.array.isRequired,\n    year: PropTypes.number.isRequired\n}\n\nMoviePoster.propType = {\n    alt: PropTypes.string.isRequired\n}\n\nMovieGenre.propType = {\n    genre: PropTypes.string.isRequired\n}\n\nexport default Movie","import React, { Component } from 'react'\nimport './App.css'\nimport Movie from './Movie'\n\nclass App extends Component {\n  \n  state = {}\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.mx/api/v2/list_movies.json?quality=3D&limit=30\")\n      .then(response => response.json())\n      .then(json => json.data.movies)\n      .catch(err => console.log(err))\n  }\n\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map(movie => {\n      return (\n        <Movie\n          title = {movie.title_english}\n          poster = {movie.large_cover_image}\n          genres = {movie.genres}\n          key = {movie.id}\n          year = {movie.year}\n        />\n      )\n    })\n    return movies\n  }\n\n  render() {\n    const  {movies}  = this.state\n    return (\n      <div className = {movies ? \"App\" : \"App_Loading\"}>\n        {movies ? this._renderMovies() : \"3D Moives List\"}\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}